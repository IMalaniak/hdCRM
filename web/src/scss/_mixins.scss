// retrieve color from map with Sass ie. `color(primary, base)`
@function app-color($map, $variant: null, $true-val: false) {
  // we need to return the color value
  @if $true-val == true {
    // color variant is optional
    @if ($variant != null) {
      // map inception, need two deep
      @return map-get(map-get($app-colors, $map), $variant);
    } @else {
      // single-level color, one deep
      @return map-get($app-colors, $map);
    }
    // if we're only returning the CSS4 variable
  } @else {
    // color variant is optional
    @if ($variant != null) {
      // map inception, need two names
      @return var(#{$color-prefix}#{$map}-#{$variant});
    } @else {
      // single-level color, one name
      @return var(#{$color-prefix}#{$map});
    }
  }
}

// retrieve size from map with Sass ie. `size(viewport, sm)`
@function app-size($size-name, $size-variant: null, $true-val: false) {
  // we need to return the size value
  @if $true-val == true {
    // size variant is optional
    @if ($size-variant != null) {
      // map inception, need two deep
      @return map-get(map-get($app-sizes, $size-name), $size-variant);
    } @else {
      // single-level size, one deep
      @return map-get($app-sizes, $size-name);
    }
    // if we're only returning the CSS4 variable
  } @else {
    // size variant is optional
    @if ($size-variant != null) {
      // map inception, need two names
      @return var(#{$size-prefix}#{$size-name}-#{$size-variant});
    } @else {
      // single-level size, one name
      @return var(#{$size-prefix}#{$size-name});
    }
  }
}

// define local variable
@mixin var($name, $value) {
  #{--$name}: $value;
}
// access any variable
@function v($name) {
  @return var(--#{$name});
}

@mixin color($prop, $theme, $variant) {
  #{$prop}: app-color($theme, $variant, true);
  #{$prop}: app-color($theme, $variant);
}

@mixin set-textcolor($variant, $host-context: true) {
  @include color(color, 'theme', $variant);

  @if $host-context == true {
    :host-context(.dark-theme) & {
      @include color(color, 'theme-dark', $variant);
    }
  } @else {
    .dark-theme & {
      @include color(color, 'theme-dark', $variant);
    }
  }
}

@mixin set-bgcolor($variant, $host-context: true) {
  @include color(background-color, 'theme', $variant);

  @if $host-context == true {
    :host-context(.dark-theme) & {
      @include color(background-color, 'theme-dark', $variant);
    }
  } @else {
    .dark-theme & {
      @include color(background-color, 'theme-dark', $variant);
    }
  }
}

@mixin set-bordercolor($variant, $host-context: true) {
  @include color(border-color, 'theme', $variant);

  @if $host-context == true {
    :host-context(.dark-theme) & {
      @include color(border-color, 'theme-dark', $variant);
    }
  } @else {
    .dark-theme & {
      @include color(border-color, 'theme-dark', $variant);
    }
  }
}

@mixin getZ-Index($container) {
  z-index: map-get($layer-priorities, $container);
}
