@import 'theme-variables';
@import 'variables';
@import 'mixins';
@import url('https://fonts.googleapis.com/css2?family=Lato:ital,wght@0,300;0,400;0,700;1,400&display=swap');
@import '~bootstrap/scss/functions';
@import '~bootstrap/scss/variables';
@import '~bootstrap/scss/mixins';

@import 'bs-theme.scss';

@import '~bootstrap/scss/root';
@import '~bootstrap/scss/reboot';
@import '~bootstrap/scss/type';
@import '~bootstrap/scss/grid';
@import '~bootstrap/scss/breadcrumb';
@import '~bootstrap/scss/utilities';
@import 'styles-reset';
@import 'root';

@import 'theme.scss';

.dark-theme {
  // Custom styles for ngx-charts
  .ngx-charts {
    text {
      fill: $gray-200;
    }
  }
}

.font-scale {
  font-size: 125%;
}

body {
  @include set-bgcolor('background', false);
  @include set-textcolor('text', false);
  margin: 0;
  height: 100vh;
  max-height: 100vh;
  max-width: 100vw;
  overflow: hidden;
  font-family: $font-family;
}

.grid {
  display: flex;
  flex-direction: column;
  position: fixed;
  justify-content: space-between;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
}

main {
  @include set-bgcolor('background', false);
  $hHeight: app-size(header, height, true);
  $height: calc(100% - #{$hHeight});

  flex-grow: 10;
  display: flex;
  flex-direction: row;
  width: 100vw;
  max-height: $height;
  flex-basis: $height;

  position: relative;

  .overlay {
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    position: absolute;
    display: block;
    @include getZ-Index(sidebar-overlay);
    visibility: hidden;
    transition: visibility $transition, background-color $transition;

    &.isVisible {
      background-color: rgba(0, 0, 0, 0.6);
      visibility: visible;
    }
  }
}

.content {
  $hHeight: app-size(header, height, true);
  flex-grow: 10;
  overflow-y: auto;
  scroll-behavior: smooth;
  overflow-x: hidden;
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  @include getZ-Index(content);

  > .wrapper {
    flex-grow: 1;
    width: 100%;

    > section.container-fluid {
      min-height: calc(100vh - #{$hHeight});
      flex: 1 0 auto;
    }
  }
}

.table-container {
  overflow-x: auto;
  max-height: 41em;
}
.crm-table {
  min-width: 100%;
  white-space: nowrap;

  td {
    vertical-align: middle;
  }

  .mat-header-cell,
  .mat-footer-cell,
  .mat-cell {
    min-width: 8rem;
    max-width: 12rem;
    text-overflow: ellipsis;
    overflow: hidden;

    &:not(:first-of-type):not(:last-of-type) {
      padding: 0 app-size(spacer, default, true);
    }
  }

  .mat-column {
    &-actions,
    &-icon {
      min-width: 3.125rem;
      max-width: 3.125rem;
      text-overflow: unset;
    }

    &-actions {
      padding-right: 0;
    }

    &-select {
      min-width: 4rem;
      max-width: 4rem;
      .mat-checkbox {
        margin-bottom: unset;
      }
    }

    &-avatar {
      padding: 0 !important;
      min-width: app-size(userpic, null, true) + 0.5rem;
      max-width: app-size(userpic, null, true) + 0.5rem;
      margin-right: 24px;
    }

    &-participants,
    &-stage,
    &-state {
      min-width: 6em;
    }

    &-deadline,
    &-createdAt,
    &-updatedAt {
      max-width: 14rem;
    }
  }

  .mat-header-cell,
  .mat-sort-header-button {
    text-transform: uppercase;
    font-weight: bold;
    @include set-textcolor('text', false);
  }
}

.mat-checkbox {
  margin-bottom: -0.5rem;

  .mat-checkbox-layout {
    margin: 0;
  }
}

.mat-dialog-container {
  position: relative;
}

.card-actions {
  margin-left: auto;
}

.card-actions,
.dialog-buttons {
  atoms-icon-button + atoms-icon-button {
    margin-left: app-size(spacer, sm, true);
  }
}

button .mat-button-focus-overlay {
  background-color: transparent !important;
}

th.text-center {
  .mat-sort-header-container {
    justify-content: center;
  }
}

th.text-right {
  .mat-sort-header-container {
    display: flex;
    justify-content: flex-end;
  }
}

// Define sizing utility to allow responsive breakpoints
// Can be deleted after Bootstrap added this to core
@each $breakpoint in map-keys($grid-breakpoints) {
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);
    @each $prop, $abbrev in (width: w, height: h) {
      @each $size, $length in $sizes {
        .#{$abbrev}#{$infix}-#{$size} {
          #{$prop}: $length !important;
        }
      }
    }
  }
}
