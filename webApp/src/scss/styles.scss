@import 'variables';
@import 'mixins';
@import url('https://fonts.googleapis.com/css?family=Ubuntu:300,400,400i,500,700&subset=cyrillic-ext,latin-ext');
@import '~bootstrap/scss/functions';
@import '~bootstrap/scss/variables';
@import '~bootstrap/scss/mixins';
@import '~bootstrap/scss/root';
@import '~bootstrap/scss/reboot';
@import '~bootstrap/scss/type';
@import '~bootstrap/scss/grid';
@import '~bootstrap/scss/breadcrumb';
@import '~bootstrap/scss/utilities';
@import 'styles-reset';
@import 'root';

@import 'theme.scss';
@include mat-core();
@include angular-material-theme($crm-theme);

.dark-theme {
  @include angular-material-theme($dark-theme);
}

.font-scale {
  font-size: 125%;
}

body {
  margin: 0;
  height: 100vh;
  max-height: 100vh;
  max-width: 100vw;
  overflow: hidden;
  font-family: 'Ubuntu', Arial, sans-serif;
}

.grid {
  display: flex;
  flex-direction: column;
  position: fixed;
  justify-content: space-between;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
}

main {
  $hHeight: crmsize(header, height, true);
  $height: calc(100% - #{$hHeight});

  flex-grow: 10;
  display: flex;
  flex-direction: row;
  width: 100vw;
  max-height: $height;
  flex-basis: $height;

  position: relative;

  .overlay {
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    position: absolute;
    display: block;
    @include getZ-Index(sidebar-overlay);
    visibility: hidden;
    transition: visibility $transition, background-color $transition;

    &.isVisible {
      background-color: rgba(0, 0, 0, 0.6);
      visibility: visible;
    }
  }
}

.content {
  $hHeight: crmsize(header, height, true);
  flex-grow: 10;
  overflow-y: auto;
  scroll-behavior: smooth;
  overflow-x: hidden;
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  @include getZ-Index(content);

  > .wrapper {
    flex-grow: 1;
    width: 100%;

    > section.container-fluid {
      min-height: calc(100vh - #{$hHeight});
      flex: 1 0 auto;
    }
  }
}

.breadcrumb {
  margin: 0;
  padding: 0.5 * crmsize(spacer, null, true) crmsize(spacer, null, true);
  @include crm-bgcolor('layout', 'dark');
  @include crm-textcolor('layout', 'milk');

  a {
    display: inherit;
    @include crm-textcolor('layout', 'milk');
  }

  > li {
    display: inline-flex;
    justify-content: center;
    align-content: center;
  }
}

.crm-table {
  td {
    vertical-align: middle;
  }

  .mat-column-actions,
  .mat-column-icon {
    flex: 0 0 3.125rem;
  }

  .mat-column-actions {
    padding-right: 0;
  }

  .mat-column-avatar {
    flex: 0 0 crmsize(userpic, null, true);
    margin-right: 24px;
  }

  .mat-column-select {
    flex: 0 0 4rem;
    .mat-checkbox {
      margin-bottom: unset;
    }
  }

  .context-menu {
    width: 3.125rem;
  }

  .mat-header-cell,
  .mat-sort-header-button {
    text-transform: uppercase;
    font-style: italic;
    @include crm-textcolor('theme', 'primary');
  }
}

.mat-checkbox {
  margin-bottom: -0.5rem;

  .mat-checkbox-layout {
    margin: 0;
  }
}

.mat-dialog-actions {
  atoms-icon-button {
    margin: 0 0.5 * crmsize(spacer, null, true);

    &:first-of-type {
      margin-left: 0;
    }

    &:last-of-type {
      margin-right: 0;
    }
  }
}

.mat-menu-item {
  display: flex !important;
  line-height: 2.5em !important;
  height: 2.5em !important;

  fa-icon {
    margin-right: 1em;
    vertical-align: middle;
    font-size: 1.25em;
    @include crm-textcolor('theme', 'primary');
  }
}

// TODO: @IMalaniak check if we can use mat-icon with font-awesome
.mat-list-icon svg {
  width: inherit !important;
  height: inherit !important;
  vertical-align: unset;
}

.mat-sort-header-container {
  align-items: baseline;
}

.table-hover {
  tr {
    cursor: pointer;
  }
}

.hidden {
  display: none;
}

.cursor-pointer {
  cursor: pointer;
}

.dark-theme-bg {
  background-color: $black;
}

button,
[type='button'],
[type='reset'],
[type='submit'] {
  appearance: none;
}

// Define sizing utility to allow responsive breakpoints
// Can be deleted after Bootstrap added this to core
@each $breakpoint in map-keys($grid-breakpoints) {
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);
    @each $prop, $abbrev in (width: w, height: h) {
      @each $size, $length in $sizes {
        .#{$abbrev}#{$infix}-#{$size} {
          #{$prop}: $length !important;
        }
      }
    }
  }
}
